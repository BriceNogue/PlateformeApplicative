@page "/login"

@using Shareds.Modeles
@using Services;
@using System.ComponentModel.DataAnnotations
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

@inject NavigationManager NavigationM
@inject UserService userService
@inject ParcService parcService

<PageTitle>Se connecter</PageTitle>

<div class="container">
   
    
        <div class="form login-form">
            <form>
                @if (!hasMultiParcs)
                {
                    <div class="form-header">
                        <h3>Connexion</h3>
                    </div>
                    <div>
                        <p>@resText</p>
                    </div>
                    <div class="form-body">
                        <div class="form-group">
                            <label for="email" class="form-label">Email :</label>
                            <input type="email" id="email" @bind="loginM!.Email" class="form-input" />
                        </div>
                        <div class="form-group">
                            <label for="password" class="form-label">Mot de passe :</label>
                            <input type="password" id="password" @bind="loginM.Password" class="form-input" />
                        </div>
                        <div>
                            <input type="checkbox" class="form-check-input" @bind="remember" />
                            <label>Se souvenir de moi.</label>
                        </div>
                        <div>
                            <a href="" @onclick="(() => GoToRegister())">Vous n'avez pas encore de compte ?</a>
                        </div>
                    </div>
                    <div class="form-control">
                        <button type="button" class="btn btn-primary" @onclick="@(()=> ToLogin(loginM))">Se connecter</button>
                    </div>
                }

                @if (hasMultiParcs)
                {
                    <div class="select-parc-form">
                        <h3>Vos établissements</h3>
                        <p>Vous possédez plusieurs établissements, veillez sélectionner celui sur lequel vous souhaitez vous connecter.</p>
                    <select class="form-select" @onchange="HandleOnChangeSelectedParc">
                        <option class="select-item" disabled selected>Selectionez un établissement</option>
                            @foreach (var parc in userParcs)
                            {
                                <option class="select-item" value="@parc.Id">@parc.Nom</option>
                            }
                        </select>
                        <div class="btns">
                        <button type="button" class="btn btn-primary" @onclick="@(() => SetSelectedParcSession(parcId))">Valider</button>
                            <button type="reset" class="btn btn-danger" @onclick="(() => CancelLogin())">Annuler</button>
                        </div>
                    </div>
                }
            </form>
        </div>
</div>

@code {
    private UserLoginModele? loginM;
    public string resText = "";
    public List<EtablissementModele> userParcs = new();
    private int parcId = 0;

    private bool hasMultiParcs = false;
    private bool remember = false;

    protected override void OnInitialized()
    {
        loginM = new UserLoginModele();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var userS = await userService.GetUserSession();
        if (userS is not null)
        {
            NavigationM.NavigateTo("/dashboard");
        }

        StateHasChanged();
    }

    public async Task ToLogin(UserLoginModele obj)
    {
        var validationResults = new List<ValidationResult>();
        var validationContext = new ValidationContext(obj, serviceProvider: null, items: null);

        bool isValid = Validator.TryValidateObject(obj, validationContext, validationResults, validateAllProperties: true);

        if (isValid)
        {
            var res = await userService.Login(obj);

            if (res is not null)
                resText = res.Message;

            if (res!.Flag)
            {
                int userId = GetUserId(res.Token!);
                userParcs = await GetUserParcs(userId);
                loginM = new UserLoginModele();
                resText = "";

                if (userParcs.Count > 1)
                {
                    hasMultiParcs = true;

                }else
                {
                    hasMultiParcs = false;
                    userService.SetUserSession();
                    if(userParcs.Count != 0)
                    {
                        parcService.SetParcSession(userParcs[0]);
                    }
                    NavigationM.NavigateTo("/dashboard");
                }
            }
        }
        else
        {
            resText = "";
            foreach (var result in validationResults)
            {
                resText += result.ToString();
            }
        }
    }

    public int GetUserId(string token)
    {
        int userId = 0;
        string userToken = "";
        if (token.StartsWith("Bearer "))
        {
            token = token.Substring("Bearer ".Length);
            userToken = token;
        }

        var tokenHandler = new JwtSecurityTokenHandler();
        var tokenDecoded = tokenHandler.ReadJwtToken(userToken);

        var claims = tokenDecoded.Claims;

        if (claims is not null)
        {
            string id = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value!;

            userId = int.Parse(id);
        }

        return userId;
    }

    public async Task<List<EtablissementModele>> GetUserParcs(int id)
    {
        try
        {
            string userToken = await userService.GetUserToken();
            var res = await parcService.GetAllByUser(id, userToken);

            return res;
        }catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public void GoToRegister()
    {
        UserService.isLoginPage = true;
        NavigationM.NavigateTo("/register");
    }

    public void CancelLogin()
    {
        hasMultiParcs = false;
    }

    private void HandleOnChangeSelectedParc(ChangeEventArgs args)
    {
        var id = args.Value!.ToString();

        parcId = int.Parse(id!);
    }

    private async Task SetSelectedParcSession(int parcId)
    {
        try
        {
            string userToken = await userService.GetUserToken();

            if (parcId != 0)
            {
                var parc = await parcService.Get(parcId, userToken);
                parcService.SetParcSession(parc);
            }

            var parcS = await parcService.GetParcSession();
            if (parcS is not null)
            {
                userService.SetUserSession();
                NavigationM.NavigateTo("/dashboard");
            }
        }catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }
}
