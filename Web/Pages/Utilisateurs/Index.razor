@page "/utilisateurs"
@layout AppLayout

@using Shareds.Modeles;
@using Services;
@using System.ComponentModel.DataAnnotations;

@inject UserService userService
@inject ParcService parcService

<PageTitle>Utilisateurs</PageTitle>

<div class="container">
    <div class="top-div">
        <div>
            @if (users.Count == 0 || users.Count == 1)
            {
                <h3>@users.Count utilisateur</h3>
            }
            else
            {
                <h3>@users.Count utilisateurs</h3>
            }
        </div>
        <div>
            <button type="button" class="btn btn-primary" @onclick="(() => ToggleModal())">
                + <span class="oi oi-person"></span>
            </button>
        </div>
    </div>

    <div class="list-users-div">
        <div class="form-group-select">
            <label for="Salles" class="form-label">Filtre par r&ocirc;le</label>
            <select class="form-select" @onchange="HandleOnChangeSelectedSearch">
                <option value="0">Tous les utilisateurs</option>
                @foreach (var type in types)
                {
                    <option class="select-item" value="@type.Id">@type.Libelle</option>
                }
            </select>
        </div>
        <div class="list-users">
            @if (users.Count == 0)
            {
                <p class="empty-list">Ce parc ne contient actuellement aucun utilisateur.</p>
            }
            else
            {
                <div class="table-container">
                    <div class="search-div">
                        <div class="form-group">
                            <input type="search" class="form-input" id="search" @oninput="HandleOnInputSearchUser" placeholder="Rechercher un utilisateur" />
                        </div>
                        <div>
                            <span class="oi oi-magnifying-glass @searchClass"></span>
                        </div>
                    </div>
                    <table class="table table-hover table-bordered">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Nom</th>
                                <th>Prénom</th>
                                <th>Téléphone</th>
                                <th>Email</th>
                                <th>Role</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in filteredUsers)
                            {
                                <tr>
                                    <td>
                                        <span class="oi oi-person"></span>
                                    </td>
                                    <td>@user.Nom</td>
                                    <td>@user.Prenom</td>
                                    <td>@user.PhoneNumber</td>
                                    <td>@user.Email</td>
                                    @{
                                        var type = types.FirstOrDefault(t => t.Id == user.IdType);
                                        if (type is not null)
                                        {
                                            <td>@type.Libelle</td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    @******************* Start Modal ********************@

    <div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Nouvelle utilisateur</h5>
                        <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="(() => ToggleModal())">
                        </button>
                    </div>
                    <form class="form modal-body">
                        <div>
                            <p>@resText</p>
                        </div>
                        <div class="form-body">
                            <div class="form-group">
                                <label for="lastName" class="form-label">Nom :</label>
                                <input type="text" id="lastName" @bind="newUser!.Nom" placeholder="Nom" class="form-input" />
                            </div>
                            <div class="form-group">
                                <label for="firstName" class="form-label">Prénom :</label>
                                <input type="text" id="firstName" @bind="newUser!.Prenom" placeholder="Prénom" class="form-input" />
                            </div>
                            <div class="form-group">
                                <label for="email" class="form-label">Email :</label>
                                <input type="email" id="email" @bind="newUser!.Email" placeholder="Email" class="form-input" />
                            </div>
                            <div class="form-group">
                                <label for="role" class="form-label">Role :</label>
                                <select class="form-select" id="role" @onchange="HandleOnChangeSelectedRole">
                                    <option disabled selected>Role</option>
                                    @foreach (var type in types)
                                    {
                                        <option class="select-item" value="@type.Id">@type.Libelle</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="phone" class="form-label">Télephone :</label>
                                <input type="phone" id="phone" @bind="newUser!.PhoneNumber" placeholder="Téléphone" class="form-input" />
                            </div>
                            <div class="form-group">
                                <label for="dateNaissance" class="form-label">Date de naissance :</label>
                                <input type="date" id="dateNaissance" value="formatedDate" @oninput="HandleDateInput" placeholder="Date de naissance" class="form-input" />
                            </div>
                        </div>
                        <div class="form-action">
                            <div>
                                <button type="button" class="btn btn-primary btn-create" @onclick="@(()=> AddUser(newUser!))">Créer</button>
                            </div>
                            <div>
                                <button type="reset" class="btn btn-danger btn-cancel" @onclick="(() => ToggleModal())">Annuler</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @if (ShowBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }

    @******************* End Modal ********************@

</div>

@code {
    private List<UserModele> users = new List<UserModele>();
    private List<UserModele> filteredUsers = new List<UserModele>();
    //private UserService userService = new UserService();
    private UserModele? newUser;
    private int userTypeId = 0;

    private List<TypeModele> types = new List<TypeModele>();
    private TypeService typeService = new TypeService();

    private string resText = "";
    private string modalDisplay = "none";
    private string modalClass = "";
    private bool ShowBackdrop = false;
    private string searchClass = "";

    private DateTime startDate = DateTime.Today;
    private string formatedDate = "";

    protected override async Task OnInitializedAsync()
    {
        newUser = new UserModele();
        string formatedDate = startDate.ToString("yyyy-MM-dd");

        var resTypes = await typeService.GetAll();
        types = resTypes.Where(t => t.Objet == "User").ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        users = await GetUsersParc();
        filteredUsers = users;

        StateHasChanged();
    }

    private async Task<List<UserModele>> GetUsersParc()
    {
        var parc = await parcService.GetParcSession();
        if(parc is not null)
        {
            var res = await userService.GetAllByParc(parc.Id);

            return res;
        }
        else
        {
            return new List<UserModele>();
        }
    }

    private void ToggleModal()
    {
        if (modalClass == "show")
        {
            modalDisplay = "none";
            modalClass = "";
            ShowBackdrop = false;
            newUser = new UserModele();
        }
        else
        {
            modalDisplay = "block";
            modalClass = "show";
            ShowBackdrop = true;
        }

        userTypeId = 0;
        resText = "";
        //StateHasChanged();
    }

    private void HandleOnInputSearchUser(ChangeEventArgs args)
    {
        var keyWord = args.Value!.ToString();
        var tempList = filteredUsers;

        if (!string.IsNullOrEmpty(keyWord))
        {
            filteredUsers = tempList.Where(u => u.Nom.ToLower().Contains(keyWord.ToLower())
                || u.Prenom.ToLower().Contains(keyWord.ToLower()) 
                || u.Email.ToLower().Contains(keyWord.ToLower()) 
                || u.PhoneNumber.ToLower().Contains(keyWord.ToLower())).ToList();

            searchClass = "io-onsearch";
        }
        else
        {
            filteredUsers = tempList;
            searchClass = "";
        }

    }

    private void HandleOnChangeSelectedSearch(ChangeEventArgs args)
    {
        var id = args.Value!.ToString();
        int idRole = int.Parse(id!);

        if (idRole != 0)
        {       
            filteredUsers = users.Where(u => u.IdType == idRole).ToList();

            searchClass = "io-onsearch";
        }
        else
        {
            filteredUsers = users;
            searchClass = "";
        }
    }

    private void HandleOnChangeSelectedRole(ChangeEventArgs args)
    {
        var id = args.Value!.ToString();

        userTypeId = int.Parse(id!);
    }

    private void HandleDateInput(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime selectedDate))
        {
            startDate = selectedDate;
            formatedDate = startDate.ToString("yyyy-MM-dd");

            if (DateTime.TryParse(formatedDate, out DateTime dateOfBirth))
            {
                newUser!.DateNaissance = dateOfBirth;
            }
        }

        CheckBirthDay(newUser!.DateNaissance);

    }

    private bool CheckBirthDay(DateTime birthday)
    {
        var nbrDays = DateTime.Today - birthday;
        var nbrYears = (int)nbrDays.TotalDays / 365;

        if (nbrYears >= 18 && nbrYears <= 100)
        {
            resText = "";
            return true;
        }
        else
        {
            resText = "Vous devez avoir entre 18 et 100 ans";
            return false;
        }
    }

    private async Task AddUser(UserModele user)
    {
        var validationResults = new List<ValidationResult>();
        var validationContext = new ValidationContext(user, serviceProvider: null, items: null);

        bool isValid = Validator.TryValidateObject(user, validationContext, validationResults, validateAllProperties: true);

        if (isValid)
        {
            resText = "";
            var parc = await parcService.GetParcSession();

            if (parc != null)
            {
                bool isOld = CheckBirthDay(newUser!.DateNaissance);
                if (isOld)
                {
                    newUser!.IdType = userTypeId;
                    var res = await userService.AddUser(user, parc.Id);

                    if (res is not null)
                    {
                        resText = res.Message;

                        if (res.Flag)
                        {
                            users = await GetUsersParc();
                            filteredUsers = users;
                            newUser = new UserModele();
                        }
                    }
                }              
            }
        }
        else
        {
            resText = "";
            foreach (var result in validationResults)
            {
                resText += result.ToString();
            }
        }
    }
}
