@page "/postes"

@using Shareds.Modeles;
@using Services;

@inject NavigationManager NavigationM
@inject UserService userService
@inject ParcService parcService

<PageTitle>Postes</PageTitle>

<div class="container">
    <div class="top-div">
        <div>
            @if (postes.Count == 0 || postes.Count == 1)
            {
                <h3>@postes.Count Poste</h3>
            }
            else
            {
                <h3>@postes.Count Postes</h3>
            }
        </div>
        <div class="form-group">
            <label for="Salles" class="form-label">Filtre par salle</label>
            <select class="form-select" @onchange="HandleOnChangeSelectedSearch">
                <option selected value="0">Sélectionnez le type de salle</option>
                @foreach (var type in types)
                {
                    <option class="select-item" value="@type.Id">@type.Libelle</option>
                }
            </select>
        </div>
    </div>

    <div class="list-postes-div">
        <div class="search-div">
            <div class="form-group">
                <label for="search_salle" class="form-label">Recherche </label>
                <input type="search" class="form-input" id="search_salle" placeholder="Rechercher une salle" @oninput="HandleOnInputSearchPost" />
            </div>
            <div>
                <button type="button" class="btn btn-primary">
                    Recherche
                </button>
            </div>
        </div>
        <div class="list-postes">
            @if (postes.Count == 0)
            {
                <p class="empty-list">Cet établissement ne contient actuellement aucun poste.</p>
            }
            else
            {
                @foreach (var poste in filtezredPostes)
                {
                    <div class="card-container">
                        <div class="card poste" @onclick="(()=> GetPosteDetails(poste.Id))">
                            <div class="card-header">
                                <span>N° @poste.Numero</span>
                            </div>
                            <div class="card-body">
                                <div class="card-img">
                                </div>
                                <p>@poste.Marque</p>
                                <p>IP : @poste.AdresseIP</p>
                                <p>SE : @poste.SE</p>

                                @{
                                    var type = types.FirstOrDefault(t => t.Id == poste.IdType);
                                    if (type != null)
                                    {
                                        <p>TYPE : @type.Libelle</p>
                                    }
                                }
                                <p>STATUT : @poste.Statut</p>
                            </div>
                            <div class="card-footer">
                                @{
                                    var salle = salles.Where(s => s.Id == poste.IdSalle);
                                    foreach (var s in salle)
                                    {
                                        <span>Salle @s.Numero</span>
                                    }
                                }
                            </div>
                        </div>
                        <div class="card-back"></div>
                    </div>
                }
                @*<table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Numéro</th>
                            <th>Marque</th>
                            <th>Adresse IP</th>
                            <th>Adresse MAC</th>
                            <th>SE</th>
                            <th>ROM</th>
                            <th>RAM</th>
                            <th>Salle</th>
                            <th>Type</th>
                            <th>Statut</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var poste in postes)
                        {
                            <tr @onclick="(()=> GetPosteDetails(poste.Id))">
                                <td>@poste.Id</td>
                                <td>Poste @poste.Numero</td>
                                <td>@poste.Marque</td>
                                <td>@poste.AdresseIP</td>
                                <td>@poste.AdresseMAC</td>
                                <td>@poste.SE</td>
                                <td>@poste.ROM</td>
                                <td>@poste.RAM</td>

                                @{
                                    var salle = salles.Where(s => s.Id == poste.IdSalle);
                                    foreach (var s in salle)
                                    {
                                        <td>@s.Numero</td>
                                    }

                                    var type = types.Where(t => t.Id == poste.IdType);
                                    foreach (var t in type)
                                    {
                                        <td>@t.Libelle</td>
                                    }
                                }

                                @if (poste.Statut == true)
                                {
                                    <td>Connecté</td>
                                }
                                else
                                {
                                    <td>Déconnecté</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>*@
            }
        </div>
    </div>
</div>


@code {
    private List<PosteModele> postes = new List<PosteModele>();
    private List<PosteModele> filtezredPostes = new List<PosteModele>();
    private PosteService posteService = new PosteService();

    private List<TypeModele> types = new List<TypeModele>();
    private TypeService typeService = new TypeService();

    private List<SalleModele> salles = new List<SalleModele>();
    private SalleService salleService = new SalleService();

    private string searchClass = "";

    protected override async Task OnInitializedAsync()
    {
        postes = await GetParcPosts();
        filtezredPostes = postes;
        salles = await GetParcSalles();

        var result = await typeService.GetAll();
        types = result.Where(t => t.Objet == "Poste").ToList<TypeModele>();
    }

    private async Task<List<PosteModele>> GetParcPosts()
    {
        try
        {
            string userToken = await userService.GetUserToken();
            var parc = await parcService.GetParcSession();

            var res = await posteService.GetAllByParc(parc.Id, userToken);

            if (res != null)
            {
                return res;
            }
            else
            {
                return new List<PosteModele>();
            }
        }catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task<List<SalleModele>> GetParcSalles()
    {
        try
        {
            string userToken = await userService.GetUserToken();
            var parc = await parcService.GetParcSession();

            var res = await salleService.GetAllByParc(parc.Id, userToken);

            if (res != null)
            {
                return res;
            }
            else
            {
                return new List<SalleModele>();
            }
        }catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task<List<TypeModele>> GetTypes()
    {
        var res = await typeService.GetAll();

        if (res != null)
        {
            return res.Where(t => t.Objet == "Poste").ToList();
        }
        else
        {
            return new List<TypeModele>();
        }
    }

    private void GetPosteDetails(int id)
    {
        var url = $"postes/details/{id}";
        NavigationM.NavigateTo(url);
    }

    private void HandleOnInputSearchPost(ChangeEventArgs args)
    {
        var keyWord = args.Value!.ToString();
        var tempList = filtezredPostes;

        if (!string.IsNullOrEmpty(keyWord))
        {
            filtezredPostes = tempList.Where(p => p.Numero.ToString() == keyWord
                || p.Marque.ToLower().Contains(keyWord.ToLower())
                || p.SE.ToLower().Contains(keyWord.ToLower())
                || p.AdresseIP.ToLower().Contains(keyWord.ToLower())).ToList();

            searchClass = "io-onsearch";
        }
        else
        {
            filtezredPostes = tempList;
            searchClass = "";
        }

    }

    private void HandleOnChangeSelectedSearch(ChangeEventArgs args)
    {
        var id = args.Value!.ToString();
        int idType = int.Parse(id!);

        if (idType != 0)
        {
            filtezredPostes = postes.Where(p => p.IdType == idType).ToList();

            searchClass = "io-onsearch";
        }
        else
        {
            filtezredPostes = postes;
            searchClass = "";
        }
    }
}
