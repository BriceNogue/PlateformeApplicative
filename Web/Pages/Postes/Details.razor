@page "/postes/details/{id:int}"
@layout AppLayout

@using Microsoft.AspNetCore.SignalR.Client
@using Shareds.Modeles;
@using Shareds.Hubs;
@using Services;

@inject UserService userService

<PageTitle>Details poste</PageTitle>

<div class="container">
    <div class="poste-infos">
        <div class="poste-info">
            <div class="infos details">
                <div>
                    <h6>ID</h6>
                    <p>@poste.Id</p>
                </div>
                <div>
                    <h6>N° Poste</h6>
                    <p>@poste.Numero</p>
                </div>
                <div>
                    <h6>N° Salle</h6>
                    <p>@salle.Numero</p>
                </div>
                <div>
                    <h6>Type</h6>
                    <p>@type.Libelle</p>
                </div>
                <div>
                    <h6>Statut</h6>
                    @if (poste.Statut == true)
                    {
                        <p>Connecté</p>
                    }
                    else
                    {
                        <p>Déconnecté</p>
                    }
                </div>
                <div>
                    <h6>Marque</h6>
                    <p>@poste.Marque</p>
                </div>
                <div>
                    <h6>Adresse IP</h6>
                    <p>@poste.AdresseIP</p>
                </div>
                <div>
                    <h6>Adresse MAC</h6>
                    <p>@poste.AdresseMAC</p>
                </div>
                <div>
                    <h6>ROM</h6>
                    <p>@poste.ROM GO</p>
                </div>
                <div>
                    <h6>RAM</h6>
                    <p> @poste.RAM GO</p>
                </div>
                <div>
                    <h6>SE</h6>
                    <p>@poste.SE</p>
                </div>
            </div>
            <div class="infos infos-ram">
            </div>
        </div>
        <div class="poste-info screen">
            dd @screenImageSource
            <img src="@screenImageSource" alt="Screen" />
        </div>
    </div>
    <div class="poste-controls">
        <div class="controls-title">
            <div>
                <p>Contr&ocirc;les</p>
            </div>
            <div>
                <hr />
            </div>
        </div>
        
        <div class="controls">
            <div class="controls-category">
                <div class="category-label">
                    <p>Application</p>
                    <span class="oi oi-terminal"></span>
                </div>
                <div class="category">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("FOOLSCREEN"))">
                        <span class="oi oi-fullscreen-enter"></span>
                        Plein écran
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("NORMALSCREEN"))">
                        <span class="oi oi-fullscreen-exit"></span>
                        Normal
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("MINIMIZESCREEN"))">
                        <span class="oi oi-minus"></span>
                        Minimiser
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("HIDDEWINDOW"))">
                        <span class="oi oi-eye"></span>
                        Masquer
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("SHOWWINDOW"))">
                        <span class="oi oi-eye"></span>
                        Afficher
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("RESTART"))">
                        <span class="oi oi-reload"></span>
                        Redémarer
                    </button>
                </div>
            </div>
            <div class="controls-category">
                <div class="category-label">
                    <p>Poste</p>
                    <span class="oi oi-monitor"></span>
                </div>
                <div class="category">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("FOOLSCREEN"))">
                        <span class="oi oi-power-standby"></span>
                        Veille
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("RESTARTPOST"))">
                        Redémarer
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("MINIMIZESCREEN"))">
                        <span class="oi oi-power-standby"></span>
                        &Eacute;teindre
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("STARTSCREENCAPTURE"))">
                        <span class="oi oi-reload"></span>
                        Screen
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => SendWindowInstructions("STOPSCREENCAPTURE"))">
                        <span class="oi oi-power-standby"></span>
                        STOP
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private SalleModele salle = new SalleModele();
    private SalleService salleService = new SalleService();

    private PosteModele poste = new PosteModele();
    private PosteService posteService = new PosteService();

    private TypeModele type = new TypeModele();
    private TypeService typeService = new TypeService();

    private InstructionsHub? instHub;

    private HubConnection? HC;
    private readonly string _hubURL = "https://localhost:7281/instructionshub";

    private string screenImageSource = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        instHub = new InstructionsHub();
        await instHub.ConnectToHub();

        HC = new HubConnectionBuilder()
                .WithUrl(_hubURL)
                .WithAutomaticReconnect()
                .Build();

        HC.On<string[]>("ReceiveScreenImage", async (imageBytes) =>
        {
            screenImageSource = imageBytes.Length.ToString();// SetScreenImage(imageBytes);
        });

        await HC.StartAsync();

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetPostDetails(id);
        StateHasChanged();
    }

    private async Task GetPostDetails(int id)
    {
        string userToken = await userService.GetUserToken();

        if(userToken is not null)
        {
            poste = await posteService.GetById(id, userToken);
            salle = await salleService.GetById(poste.IdSalle, userToken);   
        }

        type = await typeService.GetById(poste.IdType);
    }

    #region /// Instructions
    private async Task SendWindowInstructions(string instruction)
    {
        if(instHub is not null)
        {
            await instHub.SendInstruction(id, instruction);
        }
    }

    /*private async Task ReceiveScreenCaptur()
        {
        hubCunnection.On<byte[]>("ReceiveScreenImage", async (imageBytes) =>
            {
            await SetScreenImage(imageBytes);
    });
    }*/

    private string SetScreenImage(string imageBytes)
    {
        //var base64Image = $"data:image/jpge;base64,{Convert.ToBase64String(imageBytes)}";
        return imageBytes;
    }

    #endregion
}