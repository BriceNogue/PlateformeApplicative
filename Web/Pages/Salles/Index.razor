@page "/salles"
@layout AppLayout

@using Shareds.Modeles
@using System.ComponentModel.DataAnnotations
@using Web.Services

@inject NavigationManager NavigationM
@inject UserService userService
@inject ParcService parcService

<PageTitle>Salles</PageTitle>

<div class="container">
    <div class="top-div">
        <div>
            <P>Salles du parc</P>
        </div>
        <div>
            <button class="btn btn-primary" @onclick="(() => ToggleModal())">Créer une salle +</button>
        </div>
    </div>

    <div class="list-salles-div">
        <div class="search-div">
            <div class="form-group">
                <label for="search_salle" class="form-label">Recherche </label>
                <input type="search" class="form-input" id="search_salle" placeholder="Rechercher une salle" />
            </div>
            <div>
                <button type="button" class="btn btn-primary">
                    Recherche
                </button>
            </div>
        </div>
        <div class="list-salles">
            @if (salles.Count == 0)
            {
                <p class="empty-list">Cet établissement ne contient actuellement aucune salle.</p>
            }
            else
            {
                <div class="table-container">
                    <table class="table table-hover table-bordered">
                        <thead class="table-header">
                            <tr>
                                <th class="d-table-cell">Numéro</th>
                                <th class="d-table-cell">Capacité</th>
                                <th class="d-table-cell">Type</th>
                                <th class="d-table-cell">Nombre de postes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(SalleModele salle in salles)
                            {
                                <tr class="d-table-row" @onclick="(()=> GetSalleDetails(salle.Id))">
                                    <td>@salle.Numero</td>
                                    <td>@salle.Capacite</td>
                                    <td>@types.FirstOrDefault(t => t.Id == salle.IdType)!.Libelle.ToUpper()</td>
                                    <td>@postes.Where(p => p.IdSalle == salle.Id).Count()</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    @******************* Modal ********************@

    <div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay">
        <div class="modal-dialog-centered" role="document">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Nouvelle salle</h5>
                        <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="(() => ToggleModal())">
                        </button>
                    </div>
                    <form class="form modal-body">
                        <div>
                            <p>@resText</p>
                        </div>
                        <div class="form-body">
                            <div class="form-group">
                                <label for="number" class="form-label">Numéro :</label>
                                <input type="number" id="number" @bind="newSalle!.Numero" placeholder="Numéro" class="form-input" />
                            </div>
                            <div class="form-group">
                                <label for="capacity" class="form-label">Capacité :</label>
                                <input type="number" id="capacity" @bind="newSalle!.Capacite" placeholder="Capacité" class="form-input" />
                            </div>
                            <div class="form-group">
                                <label for="status" class="form-label">Statut : @salleStatus</label>
                                <label class="switch">
                                    <input type="checkbox" id="status" @bind="newSalle!.Status" @onclick="(() => SetSalleStatus())" />
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="type" class="form-label">Type de salle :</label>
                                <select class="form-select" @onchange="HandleOnChangeSelectedType">
                                    <option disabled selected>Sélectionnez le type de salle</option>
                                    @foreach(var type in types)
                                    {
                                        <option class="select-item" value="@type.Id">@type.Libelle</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-action">
                            <div>
                                <button type="button" class="btn btn-create" @onclick="@(()=> CreateNewSalle(newSalle))">Créer</button>
                            </div>
                            <div>
                                <button type="reset" class="btn btn-danger btn-cancel" @onclick="(() => ToggleModal())">Annuler</button>
                            </div>
                        </div>
                    </form>                   
                </div>
            </div>
        </div>
    </div>

    @if(ShowBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private SalleService salleService = new SalleService();
    private TypeService typeService = new TypeService();
    private PosteService posteService = new PosteService();

    private List<SalleModele> salles = new List<SalleModele>();
    private List<TypeModele> types = new List<TypeModele>();
    private List<PosteModele> postes = new();

    private SalleModele? newSalle;
    private int typeId = 0;

    private string resText = "";
    private string modalDisplay = "none";
    private string modalClass = "";
    private string salleStatus = "Indisponible";
    private bool ShowBackdrop = false;

    protected override async Task OnInitializedAsync()
    {
        newSalle = new SalleModele();
        var resTypes = await typeService.GetAll();
        types = resTypes.Where(t => t.Objet == "Salle").ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        salles = await GetParcSalles();
        postes = await GetParcPosts();

        StateHasChanged();
    }

    private async Task<List<SalleModele>> GetParcSalles()
    {
        var salles = new List<SalleModele>();

        string userToken = await userService.GetUserToken();
        var parc = await parcService.GetParcSession();

        if (parc != null && userToken != null)
        {
            var res = await salleService.GetAllByParc(parc.Id, userToken);

            if (res != null)
                salles = res;
        }

        return salles;
    }

    private async Task<List<PosteModele>> GetParcPosts()
    {
        var posts = new List<PosteModele>();

        string userToken = await userService.GetUserToken();
        var parc = await parcService.GetParcSession();

        if (parc != null && userToken != null)
        {
            var res = await posteService.GetAllByParc(parc.Id, userToken);

            if (res != null)
                posts = res;
        }

        return posts;
    }

    private void GetSalleDetails(int id)
    {
        var url = $"salles/details/{id}";
        NavigationM.NavigateTo(url);
    }

    private void ToggleModal()
    {
        if (modalClass == "show")
        {
            modalDisplay = "none";
            modalClass = "";
            ShowBackdrop = false;
            newSalle = new SalleModele();
        }
        else
        {
            modalDisplay = "block";
            modalClass = "show";
            ShowBackdrop = true;
        }

        typeId = 0;

        //StateHasChanged();
    }

    private void SetSalleStatus()
    {
        if (!newSalle!.Status)
        {
            salleStatus = "Disponible";
            newSalle!.Status = true;
        }
        else
        {
            salleStatus = "Indisponible";
            newSalle!.Status = false;
        }
    }

    private void HandleOnChangeSelectedType(ChangeEventArgs args)
    {
        var id = args.Value!.ToString();

        typeId = int.Parse(id!);
    }

    private async Task CreateNewSalle(SalleModele salle)
    {
        var validationResults = new List<ValidationResult>();
        var validationContext = new ValidationContext(salle, serviceProvider: null, items: null);

        bool isValid = Validator.TryValidateObject(salle, validationContext, validationResults, validateAllProperties: true);

        if (isValid)
        {
            resText = "";
            string userToken = await userService.GetUserToken();
            var parc = await parcService.GetParcSession();

            if (parc!= null && userToken != null)
            {
                newSalle!.IdEtablissement = parc.Id;
                newSalle!.IdType = typeId;
                var res = await salleService.Create(newSalle!, userToken);

                if (res is not null)
                {
                    resText = res.Message;
                    
                    if(res.Flag)
                    {
                        salles = await GetParcSalles();
                        newSalle = new SalleModele();
                    }
                }
            }
        }
        else
        {
            resText = "";
            foreach (var result in validationResults)
            {
                resText += result.ToString();
            }
        }
    }
}
